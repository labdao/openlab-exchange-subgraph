// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Job extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Job entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Job must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Job", id.toString(), this);
    }
  }

  static load(id: string): Job | null {
    return changetype<Job | null>(store.get("Job", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get client(): Bytes {
    let value = this.get("client");
    return value!.toBytes();
  }

  set client(value: Bytes) {
    this.set("client", Value.fromBytes(value));
  }

  get provider(): Bytes | null {
    let value = this.get("provider");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set provider(value: Bytes | null) {
    if (!value) {
      this.unset("provider");
    } else {
      this.set("provider", Value.fromBytes(<Bytes>value));
    }
  }

  get payableToken(): Bytes {
    let value = this.get("payableToken");
    return value!.toBytes();
  }

  set payableToken(value: Bytes) {
    this.set("payableToken", Value.fromBytes(value));
  }

  get jobCost(): BigDecimal {
    let value = this.get("jobCost");
    return value!.toBigDecimal();
  }

  set jobCost(value: BigDecimal) {
    this.set("jobCost", Value.fromBigDecimal(value));
  }

  get jobURI(): string {
    let value = this.get("jobURI");
    return value!.toString();
  }

  set jobURI(value: string) {
    this.set("jobURI", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get openlabNFTURI(): string | null {
    let value = this.get("openlabNFTURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set openlabNFTURI(value: string | null) {
    if (!value) {
      this.unset("openlabNFTURI");
    } else {
      this.set("openlabNFTURI", Value.fromString(<string>value));
    }
  }
}
